package io.logic;

import com.google.gson.TypeAdapterFactory;
import io.logic.gson.TypeAdapterFactoryMirror;
import io.logic.immutables.ImmutableLogicStyle;
import org.immutables.gson.Gson;
import org.immutables.value.Value.Immutable;

import javax.annotation.processing.Processor;
import javax.lang.model.element.AnnotationMirror;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.regex.Pattern;

/**
 * A representation of the {@link Logic} annotation that handles the annotation processor restriction of not being able
 * to access {@link Class} fields within the annotation for classes currently being compiled.
 * <p>
 * {@link Logic#mixins()} contains nested {@link Class} references which cannot be accessed through a directly reference
 * and therefore must be reflected through an {@link AnnotationMirror}.
 *
 * @author Ian Caffey
 * @since 1.0
 */
@Immutable
@ImmutableLogicStyle
public interface LogicSpec {
    //Immutables builder stub to hide immutable class dependency
    static Builder builder() {
        return ImmutableLogicSpec.builder();
    }

    /**
     * Represents the set of {@link Pattern} which can match against the name of fields in the model class.
     *
     * @return the patterns to use when searching for fields
     */
    Set<Pattern> getFieldPatterns();

    /**
     * Represents the set of {@link Pattern} which can match against the name of methods in the model class.
     *
     * @return the patterns to use when searching for methods
     */
    Set<Pattern> getMethodPatterns();

    /**
     * Represents the set of accepted access level modifiers for fields in the model class.
     * <p>
     * Fields which do not have an access level modifier within the set of visibilities are ignored.
     *
     * @return the set of field access levels to accept
     */
    Set<Visibility> getFieldVisibility();

    /**
     * Represents the set of accepted access level modifiers for methods in the model class.
     * <p>
     * Methods which do not have an access level modifier within the set of visibilities are ignored.
     *
     * @return the set of method access levels to accept
     */
    Set<Visibility> getMethodVisibility();

    /**
     * Represents the set of user-defined mixins to include alongside the member predicate implementations.
     *
     * @return the mixins to include in the model predicate
     */
    Set<MixinSpec> getMixins();

    /**
     * Represents the name of the package to place the predicate implementations and all auxiliary classes.
     *
     * @return the package of all generated classes for the model
     */
    String getNamespace();

    /**
     * Represents whether or not to generate all the {@link TypeAdapterFactory} required for serializing
     * the type hierarchy of logic predicates.
     * <p>
     * Generated {@link TypeAdapterFactory} are registered in <b>two places </b> with {@link ServiceLoader}.
     * <ul>
     * <li>{@link TypeAdapterFactoryMirror} represents the custom Logic type adapter factories.</li>
     * <li>All other type adapter factories that are auto-generated by Immutables are found by {@link TypeAdapterFactory}</li>
     * </ul>
     * There is no way to get around this limitation as distinct {@link Processor} cannot modify the same service file
     * and the only way to auto-generate type adapter factories for the logic predicates is through a
     * {@code RuntimeTypeAdapter}. {@link Gson.ExpectedSubtypes} does not perform well and requires distinct JSON models to
     * distinguish between subtypes and would require providing an obscure discriminator method to the model that serves
     * no purpose but to enable JSON serialization.
     *
     * @return whether or not to generate the type adapter factories for the logic predicates
     */
    boolean isGsonEnabled();

    /**
     * Represents whether or not to implement the <a href="https://en.wikipedia.org/wiki/Visitor_pattern">visitor pattern</a>
     * for the type hierarchy of logic predicates.
     *
     * @return whether or not to generate the visitor pattern for the logic predicates
     */
    boolean isVisitorEnabled();

    //Immutables builder stub to hide immutable class dependency
    interface Builder {
        Builder addFieldPattern(Pattern pattern);

        Builder addFieldPatterns(Pattern... patterns);

        Builder setFieldPatterns(Iterable<? extends Pattern> patterns);

        Builder addAllFieldPatterns(Iterable<? extends Pattern> patterns);

        Builder addMethodPattern(Pattern pattern);

        Builder addMethodPatterns(Pattern... patterns);

        Builder setMethodPatterns(Iterable<? extends Pattern> patterns);

        Builder addAllMethodPatterns(Iterable<? extends Pattern> patterns);

        Builder addFieldVisibility(Visibility visibility);

        Builder addFieldVisibility(Visibility... visibilities);

        Builder setFieldVisibility(Iterable<Visibility> visibilities);

        Builder addAllFieldVisibility(Iterable<Visibility> visibilities);

        Builder addMethodVisibility(Visibility visibility);

        Builder addMethodVisibility(Visibility... visibilities);

        Builder setMethodVisibility(Iterable<Visibility> visibilities);

        Builder addAllMethodVisibility(Iterable<Visibility> visibilities);

        Builder addMixin(MixinSpec mixin);

        Builder addMixins(MixinSpec... mixins);

        Builder setMixins(Iterable<? extends MixinSpec> mixins);

        Builder addAllMixins(Iterable<? extends MixinSpec> mixins);

        Builder setNamespace(String namespace);

        Builder setGsonEnabled(boolean gsonEnabled);

        Builder setVisitorEnabled(boolean visitorEnabled);

        LogicSpec build();
    }
}
